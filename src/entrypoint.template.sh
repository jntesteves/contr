#!/bin/sh
# SPDX-License-Identifier: Unlicense
# entrypoint - contr
#
# This file is part of contr. Do not edit this file. Use the profile
# file to setup your custom environment.
#
#{{{
import \
	"{ log_debug, log_is_level }" from nice_things/log/log.sh \
	"{ abort }" from nice_things/log/abort.sh \
	"{ realpath }" from nice_things/fs/realpath.sh
#}}}
if ! [ -f /run/.containerenv ] && ! [ -f /.dockerenv ]; then
	abort "It seems we are not in a container. ${0##*/} is meant to run inside a container."
fi

if [ -n "${CONTR_PS1-}" ]; then
	# shellcheck disable=SC2268
	if [ x"$PS1" != x"$CONTR_PS1" ]; then
		log_debug "[entrypoint.sh] [ PS1 != CONTR_PS1 ]"
		PS1=$CONTR_PS1
	fi
	which_sh=$(realpath "$(command -v sh)") && :
	which_sh=${which_sh##*/}
	if [ busybox = "$which_sh" ]; then
		log_debug "[entrypoint.sh] Detected busybox, trying to change value of PS1"
		PS1=${CONTR_PS1_BUSYBOX:-"$PS1"}
	fi
	export PS1
fi
# Substitute PS1= with __PS1= in these files so our value is not overwritten
# Needed for Debian- and Ubuntu-based images
if [ -w /etc/bash.bashrc ]; then
	sed -Ei '/^\s*PS1=/s/PS1=/__&/' /etc/bash.bashrc /etc/profile /root/.bashrc /root/.profile 2>/dev/null && :
fi

command mkdir -p "$HOME"

# Link to files in /root from HOME
if [ /root != "$HOME" ]; then
	for file in /root/.* /root/*; do
		case "$file" in
		"/root/." | "/root/.." | "/root/.*" | "/root/*") ;;
		*)
			log_debug "[entrypoint.sh] ln -s ${file} ${HOME}"
			ln -s "$file" "$HOME" && :
			;;
		esac
	done
fi

# If HOME is in /var/home or similar, add a link to it in /home
case "$HOME" in /home/*) ;; *)
	command mkdir -p /home
	command ln -s "$HOME" "/home/${HOME##*/}" && :
	;;
esac

if log_is_level debug; then
	_dbg=
else
	_dbg='#'
fi
export ENV="${HOME}/.profile"

write_profile_files() {
	for p in .bashrc .cshrc .kshrc .profile .zshrc; do
		printf "\\n%s printf '~/%s sourcing %s=%s\\\\n'\\n. '%s'\\n" "$_dbg" "$p" "$1" "$2" "$2" >>"${HOME}/$p"
	done
}
if [ -f "$CONTR_PROFILE_1" ]; then write_profile_files CONTR_PROFILE_1 "$CONTR_PROFILE_1"; fi
if [ -f "$CONTR_PROFILE_2" ]; then write_profile_files CONTR_PROFILE_2 "$CONTR_PROFILE_2"; fi

log_debug "[entrypoint.sh] \$*=$*"
if command -v "$1" >/dev/null; then
	log_debug "[entrypoint.sh] \$1='${1}' executable"
	exec "$@"
else
	log_debug "[entrypoint.sh] \$1='${1}' non-executable"
	sh_cmd=$(command -v sh) && :
	bash_cmd=$(command -v bash) && :
	if [ -x "$SHELL" ]; then
		log_debug "[entrypoint.sh] SHELL=${SHELL} executable"
	else
		log_debug "[entrypoint.sh] SHELL=${SHELL} non-executable"
		if ! [ -x "$SHELL" ] && [ -x "$bash_cmd" ]; then SHELL=$bash_cmd; fi
		if ! [ -x "$SHELL" ] && [ -x /usr/bin/bash ]; then SHELL=/usr/bin/bash; fi
		if ! [ -x "$SHELL" ] && [ -x /bin/bash ]; then SHELL=/bin/bash; fi
		if ! [ -x "$SHELL" ] && [ -x "$sh_cmd" ]; then SHELL=$sh_cmd; fi
		if ! [ -x "$SHELL" ] && [ -x /usr/bin/sh ]; then SHELL=/usr/bin/sh; fi
		if ! [ -x "$SHELL" ] && [ -x /bin/sh ]; then SHELL=/bin/sh; fi
		[ -x "$SHELL" ] || abort "SHELL=${SHELL} not executable. Could not find an executable shell"
		log_debug "[entrypoint.sh] SHELL=${SHELL} selected"
	fi
	exec $SHELL
fi
